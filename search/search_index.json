{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FLOWUnsteady Documentation","title":"Home"},{"location":"#flowunsteady-documentation","text":"","title":"FLOWUnsteady Documentation"},{"location":"how-to-guide/calculate-aerodynamic-forces/","text":"","title":"Calculate aerodynamic forces"},{"location":"how-to-guide/define-a-rotor/","text":"","title":"Define a rotor"},{"location":"how-to-guide/define-kinematic-maneuvers/","text":"","title":"Define kinematic maneuvers"},{"location":"how-to-guide/defining-systems/","text":"","title":"Defining systems"},{"location":"how-to-guide/getting-started/","text":"","title":"Getting started"},{"location":"how-to-guide/how-to/","text":"","title":"How to"},{"location":"how-to-guide/paraview-visualization/","text":"","title":"Paraview visualization"},{"location":"how-to-guide/select-a-solver/","text":"","title":"Select a solver"},{"location":"how-to-guide/set-up-monitors/","text":"","title":"Set up monitors"},{"location":"how-to-guide/set-up-runtime-functions/","text":"","title":"Set up runtime functions"},{"location":"reference/FLOWUnsteady/","text":"","title":"FLOWUnsteady"},{"location":"reference/FLOWVLM/","text":"","title":"FLOWVLM"},{"location":"reference/VPM/","text":"","title":"VPM"},{"location":"reference/theory/","text":"","title":"Theory"},{"location":"tutorials/geometry-basics/","text":"Geometry Basics In this tutorial, we'll begin by defining the geometry for a simple wing. Note that all the functions used are described in the Reference section of this documentation if you would like further information at any point. Before you begin this tutorial, it is expected that you've already installed the necessary components of FLOWUnsteady, and that you are familiar with visualization in Paraview. First things first, we need to include the FLOWUnsteady components import FLOWUnsteady vlm = FLOWUnsteady.vlm FLOWVLM Let's begin with a single section, symmetric wing. We'll start by defining some basic geometry. span = 5.0 aspectratio = 10.0 taperratio = 0.5 wingtwist = 0.0 wingsweep = 10.0 #degrees wingdihedral = 7.0 #degrees 7.0 Then we'll call the simpleWing() function to create a simple wing object. mainwing = vlm.simpleWing(span,aspectratio,taperratio,wingtwist,wingsweep,wingdihedral) FLOWVLM.Wing(0.44081745177116244, -2.5, 0.3069614022572615, 0.5, 0.0, 40, Real[0.0, 0.0, 0.0], Real[1.0 0 0; 0 1 0; 0 0 1], Real[1.0 0 0; 0 1 0; 0 0 1], nothing, Dict{String,Any}(), Real[0.440817, 0.426124, 0.410656, 0.394416, 0.377402, 0.359614, 0.341054, 0.321719, 0.301612, 0.280731 \u2026 0.280731, 0.301612, 0.321719, 0.341054, 0.359614, 0.377402, 0.394416, 0.410656, 0.426124, 0.440817], Real[0.940817, 0.94279, 0.944867, 0.947047, 0.949331, 0.95172, 0.954211, 0.956807, 0.959507, 0.96231 \u2026 0.96231, 0.959507, 0.956807, 0.954211, 0.95172, 0.949331, 0.947047, 0.944867, 0.94279, 0.940817], Real[-2.5, -2.41667, -2.32895, -2.23684, -2.14035, -2.03947, -1.93421, -1.82456, -1.71053, -1.59211 \u2026 1.59211, 1.71053, 1.82456, 1.93421, 2.03947, 2.14035, 2.23684, 2.32895, 2.41667, 2.5], Real[0.306961, 0.296729, 0.285959, 0.27465, 0.262802, 0.250416, 0.237491, 0.224028, 0.210026, 0.195486 \u2026 0.195486, 0.210026, 0.224028, 0.237491, 0.250416, 0.262802, 0.27465, 0.285959, 0.296729, 0.306961], Real[0.306961, 0.296729, 0.285959, 0.27465, 0.262802, 0.250416, 0.237491, 0.224028, 0.210026, 0.195486 \u2026 0.195486, 0.210026, 0.224028, 0.237491, 0.250416, 0.262802, 0.27465, 0.285959, 0.296729, 0.306961], Real[0.81472, 0.812469, 0.810102, 0.807619, 0.805021, 0.802308, 0.799479, 0.796534, 0.793474, 0.790299 \u2026 0.790299, 0.793474, 0.796534, 0.799479, 0.802308, 0.805021, 0.807619, 0.810102, 0.812469, 0.81472], Real[-2.45833, -2.37281, -2.28289, -2.1886, -2.08991, -1.98684, -1.87939, -1.76754, -1.65132, -1.5307 \u2026 1.5307, 1.65132, 1.76754, 1.87939, 1.98684, 2.08991, 2.1886, 2.28289, 2.37281, 2.45833], Real[0.301845, 0.291344, 0.280304, 0.268726, 0.256609, 0.243954, 0.23076, 0.217027, 0.202756, 0.187947 \u2026 0.187947, 0.202756, 0.217027, 0.23076, 0.243954, 0.256609, 0.268726, 0.280304, 0.291344, 0.301845], Real[0.565817, 0.55529, 0.544209, 0.532574, 0.520384, 0.507641, 0.494343, 0.480491, 0.466086, 0.451126 \u2026 0.451126, 0.466086, 0.480491, 0.494343, 0.507641, 0.520384, 0.532574, 0.544209, 0.55529, 0.565817], Real[-2.5, -2.41667, -2.32895, -2.23684, -2.14035, -2.03947, -1.93421, -1.82456, -1.71053, -1.59211 \u2026 1.59211, 1.71053, 1.82456, 1.93421, 2.03947, 2.14035, 2.23684, 2.32895, 2.41667, 2.5], Real[0.306961, 0.296729, 0.285959, 0.27465, 0.262802, 0.250416, 0.237491, 0.224028, 0.210026, 0.195486 \u2026 0.195486, 0.210026, 0.224028, 0.237491, 0.250416, 0.262802, 0.27465, 0.285959, 0.296729, 0.306961], nothing) Congratulations! You've created your first wing object. If you want, you can take a moment to explore the contents of your newly created mainwing . You can do so using fieldnames(mainwing) and poking around. The Reference section will have more info on the contents of the wing object. Next, let's create a wing system. system = vlm.WingSystem() FLOWVLM.WingSystem(Any[], String[], Real[0.0, 0.0, 0.0], Real[1.0 0 0; 0 1 0; 0 0 1], Real[1.0 0 0; 0 1 0; 0 0 1], nothing, Dict{String,Any}()) You now have an empty wing system, so let's add our mainwing object to it with the name \"mainwing.\" vlm.addwing(system, mainwing ,mainwing) Now that we have a wing system, let's save it as a .vtk file so we can view it in paraview. In order to do so, we are required to define a freestream velocity. Vinf(x,t) = [1,0,0] vlm.setVinf(system, Vinf) We will also want to set some parameters for saving files and set up our file system to put the files where we want. run_name = tutorial save_path = ./simplewing/ run(`rm -rf $save_path`) run(`mkdir $save_path`) Finally, we can save the files. vlm.save(system, run_name; path=save_path) tutorial_mainwing_vlm.vtk; And now we can view our wing in Paraview using the command run(`paraview`) (assuming you've set up an alias for paraview on your computer).","title":"Geometry basics"},{"location":"tutorials/geometry-basics/#geometry-basics","text":"In this tutorial, we'll begin by defining the geometry for a simple wing. Note that all the functions used are described in the Reference section of this documentation if you would like further information at any point. Before you begin this tutorial, it is expected that you've already installed the necessary components of FLOWUnsteady, and that you are familiar with visualization in Paraview. First things first, we need to include the FLOWUnsteady components import FLOWUnsteady vlm = FLOWUnsteady.vlm FLOWVLM Let's begin with a single section, symmetric wing. We'll start by defining some basic geometry. span = 5.0 aspectratio = 10.0 taperratio = 0.5 wingtwist = 0.0 wingsweep = 10.0 #degrees wingdihedral = 7.0 #degrees 7.0 Then we'll call the simpleWing() function to create a simple wing object. mainwing = vlm.simpleWing(span,aspectratio,taperratio,wingtwist,wingsweep,wingdihedral) FLOWVLM.Wing(0.44081745177116244, -2.5, 0.3069614022572615, 0.5, 0.0, 40, Real[0.0, 0.0, 0.0], Real[1.0 0 0; 0 1 0; 0 0 1], Real[1.0 0 0; 0 1 0; 0 0 1], nothing, Dict{String,Any}(), Real[0.440817, 0.426124, 0.410656, 0.394416, 0.377402, 0.359614, 0.341054, 0.321719, 0.301612, 0.280731 \u2026 0.280731, 0.301612, 0.321719, 0.341054, 0.359614, 0.377402, 0.394416, 0.410656, 0.426124, 0.440817], Real[0.940817, 0.94279, 0.944867, 0.947047, 0.949331, 0.95172, 0.954211, 0.956807, 0.959507, 0.96231 \u2026 0.96231, 0.959507, 0.956807, 0.954211, 0.95172, 0.949331, 0.947047, 0.944867, 0.94279, 0.940817], Real[-2.5, -2.41667, -2.32895, -2.23684, -2.14035, -2.03947, -1.93421, -1.82456, -1.71053, -1.59211 \u2026 1.59211, 1.71053, 1.82456, 1.93421, 2.03947, 2.14035, 2.23684, 2.32895, 2.41667, 2.5], Real[0.306961, 0.296729, 0.285959, 0.27465, 0.262802, 0.250416, 0.237491, 0.224028, 0.210026, 0.195486 \u2026 0.195486, 0.210026, 0.224028, 0.237491, 0.250416, 0.262802, 0.27465, 0.285959, 0.296729, 0.306961], Real[0.306961, 0.296729, 0.285959, 0.27465, 0.262802, 0.250416, 0.237491, 0.224028, 0.210026, 0.195486 \u2026 0.195486, 0.210026, 0.224028, 0.237491, 0.250416, 0.262802, 0.27465, 0.285959, 0.296729, 0.306961], Real[0.81472, 0.812469, 0.810102, 0.807619, 0.805021, 0.802308, 0.799479, 0.796534, 0.793474, 0.790299 \u2026 0.790299, 0.793474, 0.796534, 0.799479, 0.802308, 0.805021, 0.807619, 0.810102, 0.812469, 0.81472], Real[-2.45833, -2.37281, -2.28289, -2.1886, -2.08991, -1.98684, -1.87939, -1.76754, -1.65132, -1.5307 \u2026 1.5307, 1.65132, 1.76754, 1.87939, 1.98684, 2.08991, 2.1886, 2.28289, 2.37281, 2.45833], Real[0.301845, 0.291344, 0.280304, 0.268726, 0.256609, 0.243954, 0.23076, 0.217027, 0.202756, 0.187947 \u2026 0.187947, 0.202756, 0.217027, 0.23076, 0.243954, 0.256609, 0.268726, 0.280304, 0.291344, 0.301845], Real[0.565817, 0.55529, 0.544209, 0.532574, 0.520384, 0.507641, 0.494343, 0.480491, 0.466086, 0.451126 \u2026 0.451126, 0.466086, 0.480491, 0.494343, 0.507641, 0.520384, 0.532574, 0.544209, 0.55529, 0.565817], Real[-2.5, -2.41667, -2.32895, -2.23684, -2.14035, -2.03947, -1.93421, -1.82456, -1.71053, -1.59211 \u2026 1.59211, 1.71053, 1.82456, 1.93421, 2.03947, 2.14035, 2.23684, 2.32895, 2.41667, 2.5], Real[0.306961, 0.296729, 0.285959, 0.27465, 0.262802, 0.250416, 0.237491, 0.224028, 0.210026, 0.195486 \u2026 0.195486, 0.210026, 0.224028, 0.237491, 0.250416, 0.262802, 0.27465, 0.285959, 0.296729, 0.306961], nothing) Congratulations! You've created your first wing object. If you want, you can take a moment to explore the contents of your newly created mainwing . You can do so using fieldnames(mainwing) and poking around. The Reference section will have more info on the contents of the wing object. Next, let's create a wing system. system = vlm.WingSystem() FLOWVLM.WingSystem(Any[], String[], Real[0.0, 0.0, 0.0], Real[1.0 0 0; 0 1 0; 0 0 1], Real[1.0 0 0; 0 1 0; 0 0 1], nothing, Dict{String,Any}()) You now have an empty wing system, so let's add our mainwing object to it with the name \"mainwing.\" vlm.addwing(system, mainwing ,mainwing) Now that we have a wing system, let's save it as a .vtk file so we can view it in paraview. In order to do so, we are required to define a freestream velocity. Vinf(x,t) = [1,0,0] vlm.setVinf(system, Vinf) We will also want to set some parameters for saving files and set up our file system to put the files where we want. run_name = tutorial save_path = ./simplewing/ run(`rm -rf $save_path`) run(`mkdir $save_path`) Finally, we can save the files. vlm.save(system, run_name; path=save_path) tutorial_mainwing_vlm.vtk; And now we can view our wing in Paraview using the command run(`paraview`) (assuming you've set up an alias for paraview on your computer).","title":"Geometry Basics"},{"location":"tutorials/tutorials/","text":"Tutorials Here in the tutorials we go through step-by-step instructions for the basic usage of FLOWUnsteady. Our goal here is to get you from little/no knowledge to a basic working knowledge of how to use the code. Tutorials follow a pattern of copy/pasting commands and comparing expected output. The current list of tutorials can be found below, but before you get started, you need to install the code. In addition, the majority of graphical outputs are for visualization in Paraview. Go to the Getting Started an Paraview Visualiztion how-to guides to get everything set up, then come back here to learn how to start using FLOWUnsteady.","title":"Tutorials"},{"location":"tutorials/tutorials/#tutorials","text":"Here in the tutorials we go through step-by-step instructions for the basic usage of FLOWUnsteady. Our goal here is to get you from little/no knowledge to a basic working knowledge of how to use the code. Tutorials follow a pattern of copy/pasting commands and comparing expected output. The current list of tutorials can be found below, but before you get started, you need to install the code. In addition, the majority of graphical outputs are for visualization in Paraview. Go to the Getting Started an Paraview Visualiztion how-to guides to get everything set up, then come back here to learn how to start using FLOWUnsteady.","title":"Tutorials"}]}