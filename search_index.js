var documenterSearchIndex = {"docs":
[{"location":"tutorials/first-steps/#First-Steps-1","page":"First Steps","title":"First Steps","text":"","category":"section"},{"location":"tutorials/first-steps/#Geometry-Basics-1","page":"First Steps","title":"Geometry Basics","text":"","category":"section"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"In this tutorial, we'll begin by defining the geometry for a simple wing.  Note that all the functions used are described in the Reference section of this documentation if you would like further information at any point.  Before you begin this tutorial, it is expected that you've already installed the necessary components of FLOWUnsteady, and that you are familiar with visualization in Paraview.","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"First things first, we need to include the FLOWUnsteady components","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"import FLOWUnsteady\nuns = FLOWUnsteady\nvlm = uns.vlm\n\nspan = 1.0              #wing span\naspectratio = 10.0      #wing aspect ratio\ntaperratio = 0.5        #wing taper ratio\nwingtwist = 0.0         #wing twist\nwingsweep = 10.0        #wing sweep in degrees\nwingdihedral = 7.0      #wing dihedral in degrees","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"import FLOWUnsteady\nuns = FLOWUnsteady\nvlm = uns.vlm","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"Let's begin with a single section, symmetric wing.  We'll start by defining some basic geometry.","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"span = 1.0              #wing span\naspectratio = 10.0      #wing aspect ratio\ntaperratio = 0.5        #wing taper ratio\nwingtwist = 0.0         #wing twist\nwingsweep = 10.0        #wing sweep in degrees\nwingdihedral = 7.0      #wing dihedral in degrees","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"Then we'll call the simpleWing() function to create a simple wing object.","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"mainwing = vlm.simpleWing(span,aspectratio,taperratio,wingtwist,wingsweep,wingdihedral)","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"Congratulations! You've created your first wing object.","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"info: Exploring wing objects\nIf you want, you can take a moment to explore the contents of your newly created mainwing.  You can do so using fieldnames(mainwing) and poking around. The Reference section will have more info on the contents of the wing object.","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"Next, let's create a wing system.","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"system = vlm.WingSystem()","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"You now have an empty wing system, so let's add our mainwing object to it with the name \"mainwing.\"","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"vlm.addwing(system,\"mainwing\",mainwing)","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"Now that we have a wing system, let's save it as a .vtk file so we can view it in paraview.  In order to do so, we are required to define a freestream velocity.","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"Vinf(x,t) = [1,0,0]         #non-dimensional function defining free stream velocity\nvlm.setVinf(system, Vinf)   #set freestream velocity for the system","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"We will also want to set some parameters for saving files and set up our file system to put the files where we want.","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"danger: Be careful with rm\nMake sure you have set your save_path to something non-important so the rm command doesn't delete anything you'll miss.","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"run_name = \"tutorial\"           #define identifier at beginning of file names\nsave_path = \"./simplewing/\"     #define directory where files will be saved\n\nrun(`rm -rf $save_path`)        #clear out directory where files will be saved\nrun(`mkdir $save_path`)         #re-create directory fresh","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"Finally, we can save the files.","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"vlm.save(system, run_name; path=save_path)  #save geometry in a .vtk file format","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"And now we can view our wing in Paraview using the command run(`paraview --data=\"$(save_path)/$(run_name)_mainwing_vlm.vtk\"`) (assuming you've set up an alias for paraview on your computer).","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"(Image: basic wing)","category":"page"},{"location":"tutorials/first-steps/#Adding-a-Rotor-1","page":"First Steps","title":"Adding a Rotor","text":"","category":"section"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"Now that we have a basic wing, let's go ahead and add a rotor.  We'll use some data for the rotor that already exists in FLOWUnsteady.  You can visit the How-to guides for more information on creating your own rotor database.","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"rotor_file = \"apc10x7.csv\"          # Rotor geometry\ndata_path = uns.def_data_path       # Path to rotor database","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"With the rotor data, we can generate our rotor. This might take a minute or so to run. We supress the output here with a semi-colon as it prints a large output.","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"rotor_file = \"apc10x7.csv\"          # hide\ndata_path = uns.def_data_path       # hide\n\nR, B = uns.read_rotor(rotor_file; data_path=data_path)[[1,3]] #get the radius for later\n\nrotor = uns.generate_rotor(rotor_file; pitch=0.0,\n                                            n=10, CW=true, ReD=1.5e6,\n                                            verbose=true, xfoil=true,\n                                            data_path=data_path,\n                                            plot_disc=false);","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"And then we can generate a rotor object, where we again supress the output.","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"rotors = vlm.Rotor[rotor];","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"This will put the rotor at the default location and orientation which we will define here since we now need to move the rotor relative to the wing which is already at this location.","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"vehicleorigin = [0.0; 0.0; 0.0]\nvehicleaxis = [1.0 0.0 0.0; 0.0 1.0 0.0; 0.0 0.0 1.0]","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"To move the rotor, we need to define a new origin point.","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"rotororigin = [-0.1; 0.0; 0.0]","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"Then we can use that origin to set the rotor coordinate system in order to move the rotor.","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"for rotor in rotors\n    vlm.setcoordsystem(rotor, rotororigin, vehicleaxis; user=true)\nend","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"which we can put in a tuple that stores our rotor system(s).","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"rotor_systems = (rotors,);","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"We also need to add it to our overall system.","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"for rotor in rotors; vlm.addwing(system, run_name, rotor); end;","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"Like setting the Vinf parameter for the main wing, we need to give our rotor an RPM as well.","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"RPMref = 6000       #reference RPM\nfor rotor in rotors; vlm.setRPM(rotor, RPMref); end;","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"We should now be able to visualize our wing with a rotor.","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"run(`rm -rf $save_path`)\nrun(`mkdir $save_path`)\n\nvlm.save(system, run_name; path=save_path)\nrun(`paraview --data=\"$(save_path)/tutorial_mainwing_vlm.vtk;tutorial_tutorial_Blade1_vlm.vtk;tutorial_tutorial_Blade2_vlm.vtk;tutorial_tutorial_Blade1_loft.vtk;tutorial_tutorial_Blade2_loft.vtk;\"`)","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"(Image: wing with rotor)","category":"page"},{"location":"tutorials/first-steps/#Other-Systems-1","page":"First Steps","title":"Other Systems","text":"","category":"section"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"In order run an analysis with our little airplane, we're going to have to add a few more systems","category":"page"},{"location":"tutorials/first-steps/#VLM-Systems-1","page":"First Steps","title":"VLM Systems","text":"","category":"section"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"First let's create a VLM system and add our main wing to it.","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"vlm_system = vlm.WingSystem()\n\nvlm.addwing(vlm_system, \"mainwing\", mainwing)","category":"page"},{"location":"tutorials/first-steps/#Wake-Systems-1","page":"First Steps","title":"Wake Systems","text":"","category":"section"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"Next, let's create a wake system and add both the VLM system and rotor.","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"wake_system = vlm.WingSystem()\n\nvlm.addwing(wake_system, \"SolveVLM\", vlm_system)\n\nfor rotor in rotors; vlm.addwing(wake_system, run_name, rotor); end;","category":"page"},{"location":"tutorials/first-steps/#Tilting-Systems-1","page":"First Steps","title":"Tilting Systems","text":"","category":"section"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"We'll also need to identify tilting objects, but since we don't have any tilting components yet, we'll just initialize an empty tuple. For more information on adding tilting objects (like control surfaces, or tilt-wings) see Advanced System Definition.","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"tilting_systems = ();","category":"page"},{"location":"tutorials/first-steps/#Kinematic-Maneuvers-1","page":"First Steps","title":"Kinematic Maneuvers","text":"","category":"section"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"Now let's define our maneuver. For now, let's just have the airplane fly in a straight and level. We are going to have to define non-dimensional functions for the velocity for the vehicle, the angle for the vehicle, the angles for our tilting systems, and the rotation rate for the rotor(s).","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"info: Non-dimensionalized Functions\nThe functions that define the kinematic maneuver must be defined non-dimensionally. For more information on this, see Advanced Kinematic Maneuver Definition.","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"We'll start with the vehicle velocity function.","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"Vvehicle(t) = [-1.0,0.0,0.0]","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"Next, let's define the vehicle angle.","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"anglevehicle(t) = zeros(3)","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"Now the angle of the titling systems (we don't have any, so it's just empty again).","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"angle = ();","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"Lastly, we need to define a rotation rate function for each of the rotors.","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"RPM_fun(t) = 1.0\n\nRPM = (RPM_fun, );","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"With all the individual elements defined, we can create a maneuver","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"maneuver = uns.KinematicManeuver(angle, RPM, Vvehicle, anglevehicle)","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"We can also plot the maneuver to quickly see what we made.","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"uns.plot_maneuver(maneuver)","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"A plot of the maneuver is helpful, but visualizing in Paraview can also be helpful. In order to do that, however, we first need to set up a simulation.","category":"page"},{"location":"tutorials/first-steps/#Setting-up-a-Basic-Simulation-1","page":"First Steps","title":"Setting up a Basic Simulation","text":"","category":"section"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"We already have most of the elements we need to define a simulation, but need to create a vehicle to be used in the simulation with the systems we've already defined.","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"vehicle = uns.VLMVehicle(   system;\n                            tilting_systems = tilting_systems,\n                            rotor_systems   = rotor_systems,\n                            vlm_system      = vlm_system,\n                            wake_system     = wake_system,\n                        );","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"In addition, we still need to define a reference velocity, the total time for the simulation, and a few initial conditions.","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"Vref = 10.0         #define a reference velocity for the vehicle\nttot = 1.0          #define a total simulation time, in seconds\nnsteps = 300        #define the number of steps the simulation will take\n\n#initial conditions\ntinit = 0.0                                  #initial time\nVinit = Vref*maneuver.Vvehicle(tinit/ttot)   #initial linear velocity\nWinit = zeros(3)                             #initial angular velocity","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"With everything now defined, we can create a simulation","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"simulation = uns.Simulation(vehicle, maneuver, Vref, RPMref, ttot; Vinit=Vinit, Winit=Winit, t=tinit);","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"Finally, we can visualize the maneuver in Paraview.","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"files = uns.visualize_kinematics(   simulation, nsteps, save_path;\n                                    run_name=run_name,\n                                    prompt=false,\n                                    paraview=false\n                                )\n\nrun(`paraview --data=\"$save_path/$files\"`)","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"(Image: moving wing and rotor)","category":"page"},{"location":"tutorials/first-steps/#Running-the-Simulation-1","page":"First Steps","title":"Running the Simulation","text":"","category":"section"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"We also now run the simulation and use Paraview to look at the outputs.","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"note: Outputs\nWe are only outputting the basic pressure field here. In order to have additional outputs, it is necessary to write some extra runtime functions, see Set up run-time Functions and Set up run-time Monitors for more information.","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"note: Run Time\nRunning simulations typcially takes a while.  You may want to reduce nsteps, but the visual below shows results for 300 steps.","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"nullfunc(args...) = false\npfield = uns.run_simulation(simulation, nsteps;\n                                    surf_sigma=R/10,\n                                    Vinf=Vinf,\n                                    save_path=save_path,\n                                    run_name=run_name,\n                                    prompt=false,\n                                    verbose=true,\n                                    extra_runtime_function=nullfunc\n                                    )\n\nrun(`paraview --data=\"$save_path/$(files);tutorial_pfield...vtk\"`)","category":"page"},{"location":"tutorials/first-steps/#","page":"First Steps","title":"First Steps","text":"(Image: pressure field)","category":"page"},{"location":"tutorials/define-kinematic-maneuvers/#Advanced-Kinematic-Maneuver-Definition-1","page":"Advanced Kinematic Maneuver Definition","title":"Advanced Kinematic Maneuver Definition","text":"","category":"section"},{"location":"how-to-guide/paraview-visualization/#Visualize-with-Paraview-1","page":"Visualize with Paraview","title":"Visualize with Paraview","text":"","category":"section"},{"location":"tutorials/define-complex-systems/#Advanced-System-Definition-1","page":"Advanced System Definition","title":"Advanced System Definition","text":"","category":"section"},{"location":"tutorials/define-complex-systems/#","page":"Advanced System Definition","title":"Advanced System Definition","text":"In this guide, we will cover how to define complex systems. Basic system definitions were presented in the First Steps tutorial, but applications quickly become more complex than a simple, control-free wing.","category":"page"},{"location":"tutorials/define-complex-systems/#Wing-Subsystems-1","page":"Advanced System Definition","title":"Wing Subsystems","text":"","category":"section"},{"location":"tutorials/define-complex-systems/#","page":"Advanced System Definition","title":"Advanced System Definition","text":"We will first cover creating wing subsystems.  The key here is that any system can be a sub-system. Take, for example, the vertical stabilizer and rudder from Advanced Wing Definition which we can define a add to a wing system.","category":"page"},{"location":"tutorials/define-complex-systems/#","page":"Advanced System Definition","title":"Advanced System Definition","text":"#Vertical Stabilizer\nspan = 0.25                                     #length of full span\nnumlattice = 5                                  #number of lattice elements on half-span\nposchord = [0.0; 1.0]                #postion of chord stations\nlengthtipchordvstab = 0.05                          #length of tip chord\nlengthchordvstab = [1.25; 1.0]     #length of chords\ntwistchord = [0.0; 0.0]                         #twist of chords, in degrees\nsweepsection = [0.0]                      #sweep of sections between chords, in degrees\ndihedralsection = [0.0]                    #dihedral of sections between chords, in degrees\naspectratio = span/lengthtipchordvstab\n\nverticalstabilizer = vlm.complexWing(span, aspectratio, numlattice, poschord, lengthchordvstab, twistchord, sweepsection, dihedralsection; symmetric=false, chordalign=1.0)\n\noriginvstab = [0.5; 0.0; 0.0]                       #origin moved 0.5 in positive x-direction\ncsysvstab = [1.0 0.0 0.0; 0.0 0.0 1.0; 0.0 1.0 0.0] #csys rotated 90 degrees from default\nvlm.setcoordsystem(verticalstabilizer,originvstab,csysvstab)\n\n\n#Rudder\nspan = 0.25                                     #length of full span\nnumlattice = 5                                  #number of lattice elements on half-span\nposchord = [0.0; 0.25; 1.0]                #postion of chord stations\nlengthtipchord = 0.03                          #length of tip chord\nlengthchord = [1.25; 1.5; 1.0]     #length of chords\ntwistchord = [0.0; 0.0; 0.0]                         #twist of chords, in degrees\nsweepsection = [0.0; 0.0]                      #sweep of sections between chords, in degrees\ndihedralsection = [0.0; 0.0]                    #dihedral of sections between chords, in degrees\naspectratio = span/lengthtipchord\n\nrudder = vlm.complexWing(span, aspectratio, numlattice, poschord, lengthchord, twistchord, sweepsection, dihedralsection; symmetric=false, chordalign=0.0)\n\nlengthrootchordvstab = lengthchordvstab[1]*lengthtipchordvstab\noriginrudder = [0.5+lengthrootchordvstab; 0.0; 0.0]                       #account for vstab position and chord\ncsysrudder = [1.0 0.0 0.0; 0.0 0.0 1.0; 0.0 1.0 0.0] #csys rotated 90 degrees from default\nvlm.setcoordsystem(rudder,originrudder,csysrudder)\n\n\n#System Definition\ntail = vlm.WingSystem()\nvlm.addwing(tail,\"vstab\",verticalstabilizer)\nvlm.addwing(tail,\"rudder\",rudder)","category":"page"},{"location":"tutorials/define-complex-systems/#","page":"Advanced System Definition","title":"Advanced System Definition","text":"Now we might want that tail system to be part of a full system, so let's define the main wing and add both it and the tail system to the full system.","category":"page"},{"location":"tutorials/define-complex-systems/#","page":"Advanced System Definition","title":"Advanced System Definition","text":"#Main Wing\nspan = 1.0                      #length of full span\nnumlattice = 10                 #number of lattice elements on half-span\n\nposchord = [0.0; 0.5; 1.0]./span                #postion of chord stations\nlengthtipchord = 0.03                            #length of tip chord\nlengthchord = [0.075; 0.05; 0.03]./lengthtipchord   #length of chords\ntwistchord = [0.0; 0.0; -3.0]                   #twist of chords, in degrees\nsweepsection = [10.0; 5.0]      #sweep of sections between chords, in degrees\ndihedralsection = [0.0; 7.0]    #dihedral of sections between chords, in degrees\naspectratio = span/lengthtipchord\n\nmainwing = vlm.complexWing(span, aspectratio, numlattice, poschord, lengthchord, twistchord, sweepsection, dihedralsection; symmetric=true)\n\n\n#System Definition\nsystem = vlm.WingSystem()\nvlm.addwing(system,\"mainwing\",mainwing)\nvlm.addwing(system,\"tail\",tail)","category":"page"},{"location":"tutorials/define-complex-systems/#","page":"Advanced System Definition","title":"Advanced System Definition","text":"And that's all there is to it. The main wing and tail system are now both components of the overall system. Any combination of wing objects and wing systems can be added to any system.","category":"page"},{"location":"tutorials/define-complex-systems/#VLM-Systems-1","page":"Advanced System Definition","title":"VLM Systems","text":"","category":"section"},{"location":"tutorials/define-complex-systems/#","page":"Advanced System Definition","title":"Advanced System Definition","text":"Anything that will be solved using the VLM (see Reference) needs to be identified as such. In our case, all the wings fall under this category.","category":"page"},{"location":"tutorials/define-complex-systems/#","page":"Advanced System Definition","title":"Advanced System Definition","text":"vlm_system = vlm.WingSystem()\nvlm.addwing(vlm_system,\"mainwing\",mainwing)\nvlm.addwing(vlm_system,\"tail\",tail)","category":"page"},{"location":"tutorials/define-complex-systems/#Wake-Systems-1","page":"Advanced System Definition","title":"Wake Systems","text":"","category":"section"},{"location":"tutorials/define-complex-systems/#","page":"Advanced System Definition","title":"Advanced System Definition","text":"You need to tell the solver which of the systems you've created need to be included in the wake simulation.  In this case, we want everything to be in our wake system, which is defined just like before.","category":"page"},{"location":"tutorials/define-complex-systems/#","page":"Advanced System Definition","title":"Advanced System Definition","text":"wake_system = vlm.WingSystem()\nvlm.addwing(wake_system,\"mainwing\",mainwing)\nvlm.addwing(wake_system,\"tail\",tail)","category":"page"},{"location":"tutorials/define-complex-systems/#Rotor-Systems-1","page":"Advanced System Definition","title":"Rotor Systems","text":"","category":"section"},{"location":"tutorials/define-complex-systems/#","page":"Advanced System Definition","title":"Advanced System Definition","text":"Rotor systems begin with rotors, the definition of which is covered in Advanced Rotor Definition.  Once you have rotors defined with their respetive databases, you can create rotor systems.  Let's add two rotors to our airplane in this guide to see how it is done.","category":"page"},{"location":"tutorials/define-complex-systems/#","page":"Advanced System Definition","title":"Advanced System Definition","text":"First let's decide where we want to place the rotors.","category":"page"},{"location":"tutorials/define-complex-systems/#","page":"Advanced System Definition","title":"Advanced System Definition","text":"posrotorplus = [0.0; 0.25; 0.0]      #xyz position of rotor in positive y-direction\nposrotorminus = -posrotorplus       #xyz position of rotor in negative y-direction\nvehicleaxis = [1.0 0.0 0.0; 0.0 1.0 0.0; 0.0 0.0 1.0]   #default coordinate system","category":"page"},{"location":"tutorials/define-complex-systems/#","page":"Advanced System Definition","title":"Advanced System Definition","text":"We need a few more parameters for defining rotors as well.","category":"page"},{"location":"tutorials/define-complex-systems/#","page":"Advanced System Definition","title":"Advanced System Definition","text":"rotor_file = \"apc10x7.csv\"          # data file for rotor\ndata_path = uns.def_data_path       # data path to find file\n\nR, B = uns.read_rotor(rotor_file; data_path=data_path)[[1,3]] #grab rotor radius\nn = 100.0                           #target RPS\nVref = 20.0                         #freestream velocity\nvind = sqrt( Vref^2 + (n*R)^2 )     #velocity at blade tip\nrho = 1.225                         #(kg/m^3) air density\nmu = 1.81e-5                        #(kg/ms) air dynamic viscosity\nReD = rho*2.0*R*vind/mu             #Diameter-based Reynolds\n\nnumbladeelements = 10               #number of blade elements\nrotorpitch = 0.0                    #rotor pitch","category":"page"},{"location":"tutorials/define-complex-systems/#","page":"Advanced System Definition","title":"Advanced System Definition","text":"Now we are ready to define some propellers.","category":"page"},{"location":"tutorials/define-complex-systems/#","page":"Advanced System Definition","title":"Advanced System Definition","text":"rotors = vlm.Rotor[]\n\npush!(rotors,\n        uns.generate_rotor(rotor_file;\n                            pitch=rotorpitch,\n                            n=numbladeelements,\n                            CW=true,\n                            ReD=ReD,\n                            verbose=true,\n                            xfoil=false,\n                            data_path=data_path)\n    )\n\n\npush!(rotors,\n        vlm.Rotor(!rotors[1].CW,\n                    rotors[1].r,\n                    rotors[1].chord,\n                    rotors[1].theta,\n                    rotors[1].LE_x,\n                    rotors[1].LE_z,\n                    rotors[1].B,\n                    rotors[1].airfoils))\n\nvlm.initialize(rotors[2], rotors[1].m)\n\nvlm.setcoordsystem(rotors[1], posrotorminus, vehicleaxis; user=true)\nvlm.setcoordsystem(rotors[2], posrotorplus, vehicleaxis; user=true)","category":"page"},{"location":"tutorials/define-complex-systems/#","page":"Advanced System Definition","title":"Advanced System Definition","text":"Now that we have defined our rotors, we can add them to the other systems","category":"page"},{"location":"tutorials/define-complex-systems/#","page":"Advanced System Definition","title":"Advanced System Definition","text":"for (i, rotor) in enumerate(rotors)\n    vlm.addwing(system, \"rotor$i\", rotor)\n    vlm.addwing(wake_system, \"Rotor$i\", rotor)\nend","category":"page"},{"location":"tutorials/define-complex-systems/#","page":"Advanced System Definition","title":"Advanced System Definition","text":"note: Repeated Object Names\nYou can only use a specific name in one system. Note how in the example above, rotor$i is used for the main system, and captial Rotor$i is used for the wake system","category":"page"},{"location":"tutorials/define-complex-systems/#","page":"Advanced System Definition","title":"Advanced System Definition","text":"Finally, we need to create our rotor system, which is actually just a tuple of the rotor object we've already created.","category":"page"},{"location":"tutorials/define-complex-systems/#","page":"Advanced System Definition","title":"Advanced System Definition","text":"rotor_systems = (rotors, )","category":"page"},{"location":"tutorials/define-complex-systems/#","page":"Advanced System Definition","title":"Advanced System Definition","text":"(Image: )","category":"page"},{"location":"tutorials/define-complex-systems/#Tilting-Systems-1","page":"Advanced System Definition","title":"Tilting Systems","text":"","category":"section"},{"location":"tutorials/define-complex-systems/#","page":"Advanced System Definition","title":"Advanced System Definition","text":"A tilting system is simply a tuple of all the wing systems that will be rotating according to specific definitions beyond the overall aircraft orientations. In our case, that would just be the rudder.","category":"page"},{"location":"tutorials/define-complex-systems/#","page":"Advanced System Definition","title":"Advanced System Definition","text":"tilting_systems = (rudder, )","category":"page"},{"location":"tutorials/define-complex-systems/#","page":"Advanced System Definition","title":"Advanced System Definition","text":"#Vertical Stabilizer\nspan = 0.25                                     #length of full span\nnumlattice = 5                                  #number of lattice elements on half-span\nposchord = [0.0; 1.0]                #postion of chord stations\nlengthtipchordvstab = 0.05                          #length of tip chord\nlengthchordvstab = [1.25; 1.0]     #length of chords\ntwistchord = [0.0; 0.0]                         #twist of chords, in degrees\nsweepsection = [0.0]                      #sweep of sections between chords, in degrees\ndihedralsection = [0.0]                    #dihedral of sections between chords, in degrees\naspectratio = span/lengthtipchordvstab\n\nverticalstabilizer = vlm.complexWing(span, aspectratio, numlattice, poschord, lengthchordvstab, twistchord, sweepsection, dihedralsection; symmetric=false, chordalign=1.0)\n\noriginvstab = [0.5; 0.0; 0.0]                       #origin moved 0.5 in positive x-direction\ncsysvstab = [1.0 0.0 0.0; 0.0 0.0 1.0; 0.0 1.0 0.0] #csys rotated 90 degrees from default\nvlm.setcoordsystem(verticalstabilizer,originvstab,csysvstab)\n\n\n#Rudder\nspan = 0.25                                     #length of full span\nnumlattice = 5                                  #number of lattice elements on half-span\nposchord = [0.0; 0.25; 1.0]                #postion of chord stations\nlengthtipchord = 0.03                          #length of tip chord\nlengthchord = [1.25; 1.5; 1.0]     #length of chords\ntwistchord = [0.0; 0.0; 0.0]                         #twist of chords, in degrees\nsweepsection = [0.0; 0.0]                      #sweep of sections between chords, in degrees\ndihedralsection = [0.0; 0.0]                    #dihedral of sections between chords, in degrees\naspectratio = span/lengthtipchord\n\nrudder = vlm.complexWing(span, aspectratio, numlattice, poschord, lengthchord, twistchord, sweepsection, dihedralsection; symmetric=false, chordalign=0.0)\n\nlengthrootchordvstab = lengthchordvstab[1]*lengthtipchordvstab\noriginrudder = [0.5+lengthrootchordvstab; 0.0; 0.0]                       #account for vstab position and chord\ncsysrudder = [1.0 0.0 0.0; 0.0 0.0 1.0; 0.0 1.0 0.0] #csys rotated 90 degrees from default\nvlm.setcoordsystem(rudder,originrudder,csysrudder)\n\n\n#System Definition\ntail = vlm.WingSystem()\nvlm.addwing(tail,\"vstab\",verticalstabilizer)\nvlm.addwing(tail,\"rudder\",rudder)\n\n#Main Wing\nspan = 1.0                      #length of full span\nnumlattice = 10                 #number of lattice elements on half-span\n\nposchord = [0.0; 0.5; 1.0]./span                #postion of chord stations\nlengthtipchord = 0.03                            #length of tip chord\nlengthchord = [0.075; 0.05; 0.03]./lengthtipchord   #length of chords\ntwistchord = [0.0; 0.0; -3.0]                   #twist of chords, in degrees\nsweepsection = [10.0; 5.0]      #sweep of sections between chords, in degrees\ndihedralsection = [0.0; 7.0]    #dihedral of sections between chords, in degrees\naspectratio = span/lengthtipchord\n\nmainwing = vlm.complexWing(span, aspectratio, numlattice, poschord, lengthchord, twistchord, sweepsection, dihedralsection; symmetric=true)\n\n\n#System Definition\nsystem = vlm.WingSystem()\nvlm.addwing(system,\"mainwing\",mainwing)\nvlm.addwing(system,\"tail\",tail)\n\n\n\n\nposrotorplus = [0.0; 0.25; 0.0]      #xyz position of rotor in positive y-direction\nposrotorminus = -posrotorplus       #xyz position of rotor in negative y-direction\nvehicleaxis = [1.0 0.0 0.0; 0.0 1.0 0.0; 0.0 0.0 1.0]   #default coordinate system\n\n\n\n\nrotor_file = \"apc10x7.csv\"          # data file for rotor\ndata_path = uns.def_data_path       # data path to find file\n\nR, B = uns.read_rotor(rotor_file; data_path=data_path)[[1,3]] #grab rotor radius\nn = 100.0                           #target RPS\nVref = 20.0                         #freestream velocity\nvind = sqrt( Vref^2 + (n*R)^2 )     #velocity at blade tip\nrho = 1.225                         #(kg/m^3) air density\nmu = 1.81e-5                        #(kg/ms) air dynamic viscosity\nReD = rho*2.0*R*vind/mu             #Diameter-based Reynolds\n\nnumbladeelements = 10               #number of blade elements\nrotorpitch = 0.0                    #rotor pitch\n\n\nrotors = vlm.Rotor[]\n\npush!(rotors,\n        uns.generate_rotor(rotor_file;\n                            pitch=rotorpitch,\n                            n=numbladeelements,\n                            CW=true,\n                            ReD=ReD,\n                            verbose=true,\n                            xfoil=false,\n                            data_path=data_path)\n    )\n\n\npush!(rotors,\n        vlm.Rotor(!rotors[1].CW,\n                    rotors[1].r,\n                    rotors[1].chord,\n                    rotors[1].theta,\n                    rotors[1].LE_x,\n                    rotors[1].LE_z,\n                    rotors[1].B,\n                    rotors[1].airfoils))\n\nvlm.initialize(rotors[2], rotors[1].m)\n\nvlm.setcoordsystem(rotors[1], posrotorminus, vehicleaxis; user=true)\nvlm.setcoordsystem(rotors[2], posrotorplus, vehicleaxis; user=true)\n\n\n\nfor (i, rotor) in enumerate(rotors)\n    vlm.addwing(wake_system, \"rotor$i\", rotor)\nend\n\n\n\n\nVinf(x,t) = [1,0,0]         #non-dimensional function defining free stream velocity\nvlm.setVinf(system, Vinf)   #set freestream velocity for the system\nRPMref = 6000       #reference RPM\nfor rotor in rotors; vlm.setRPM(rotor, RPMref); end;\n\nrun_name = \"tutorial\"           #define identifier at beginning of file names\nsave_path = \"./simplewing/\"     #define directory where files will be saved\n\nrun(`rm -rf $save_path`)        #clear out directory where files will be saved\nrun(`mkdir $save_path`)         #re-create directory fresh\n\nvlm.save(system, run_name; path=save_path)  #save geometry in a .vtk file format\nrun(`paraview`)","category":"page"},{"location":"tutorials/define-a-rotor/#Advanced-Rotor-Definition-1","page":"Advanced Rotor Definition","title":"Advanced Rotor Definition","text":"","category":"section"},{"location":"tutorials/define-a-rotor/#","page":"Advanced Rotor Definition","title":"Advanced Rotor Definition","text":"Modules used:","category":"page"},{"location":"tutorials/define-a-rotor/#","page":"Advanced Rotor Definition","title":"Advanced Rotor Definition","text":"GeometricTools\nVLM","category":"page"},{"location":"tutorials/define-a-rotor/#","page":"Advanced Rotor Definition","title":"Advanced Rotor Definition","text":"If you'd like to simulate any type of rotor, say a propeller, fan or turbine, you define your parameters, setup the simulation and then run the simulation. As with previous tasks, here we go through each step, but adding two rotors to the hershey bar wing.","category":"page"},{"location":"tutorials/define-a-rotor/#Parameters-1","page":"Advanced Rotor Definition","title":"Parameters","text":"","category":"section"},{"location":"tutorials/define-a-rotor/#","page":"Advanced Rotor Definition","title":"Advanced Rotor Definition","text":"First you will need to define all of the parameters that dictate the geometry and aerodynamic qualities of your rotor. Most of the information that defines your rotor is included in a database. FlowUnsteady includes a modest database of rotors including propellers and turbine blades. If you need a rotor outside of the database, see below on how to add a custom rotor.","category":"page"},{"location":"tutorials/define-a-rotor/#","page":"Advanced Rotor Definition","title":"Advanced Rotor Definition","text":"Initialize FlowUnsteady and define the rotor file, input and output paths, and run name.","category":"page"},{"location":"tutorials/define-a-rotor/#","page":"Advanced Rotor Definition","title":"Advanced Rotor Definition","text":"import FLOWUnsteady\nuns = FLOWUnsteady\nvlm = uns.vlm\n\nimport GeometricTools\ngt = GeometricTools\n\n\n# ------ PARAMETERS ---------\n# Rotor Geometry\nrotor_file = \"DJI-II.csv\" \t\t\t\t\t\t#Rotor Geometry\ndata_path = uns.def_data_path \t\t\t\t#Path to rotor database\nrun_name = \"singlerotor\"","category":"page"},{"location":"tutorials/define-a-rotor/#","page":"Advanced Rotor Definition","title":"Advanced Rotor Definition","text":"Define rotor parameters.\nNote that the parameters must match what is given in the rotor definition files, otherwise the simulation will fail or provide incorrect results.","category":"page"},{"location":"tutorials/define-a-rotor/#","page":"Advanced Rotor Definition","title":"Advanced Rotor Definition","text":"pitch = 0.0 \t\t\t\t\t\t#(deg) collective blade pitch\nn\t\t\t= 10 \t\t\t\t\t\t\t# Number of blade elements\nCW \t\t= false \t\t\t\t\t# Clock-wise rotation","category":"page"},{"location":"tutorials/define-a-rotor/#","page":"Advanced Rotor Definition","title":"Advanced Rotor Definition","text":"Some rotor geometry values can be read directly from the rotor file, preventing some error due to mismatched data.","category":"page"},{"location":"tutorials/define-a-rotor/#","page":"Advanced Rotor Definition","title":"Advanced Rotor Definition","text":"R, B = uns.read_rotor(rotor_file; data_path=data_path)[[1,3]]","category":"page"},{"location":"tutorials/define-a-rotor/#","page":"Advanced Rotor Definition","title":"Advanced Rotor Definition","text":"Define simulation parameters according to your situation:","category":"page"},{"location":"tutorials/define-a-rotor/#","page":"Advanced Rotor Definition","title":"Advanced Rotor Definition","text":"RPM = 5000                          # RPM\nJ   = 0.0                           # Advance ratio Vinf/(nD)\nrho = 1.225                         # (kg/m^3) air density\nmu  = 1.81e-5                       # (kg/ms) air dynamic viscosity\nReD = 2*pi*RPM/60*R * rho/mu * 2*R  # Tip-based Reynolds number","category":"page"},{"location":"tutorials/define-a-rotor/#","page":"Advanced Rotor Definition","title":"Advanced Rotor Definition","text":"Define a function that describes freestream velocity.","category":"page"},{"location":"tutorials/define-a-rotor/#","page":"Advanced Rotor Definition","title":"Advanced Rotor Definition","text":"Vinf(x,t) = [20, 0, 0] \t\t\t\t\t\t\t#(m/s) freestream velocity [soley x direction]","category":"page"},{"location":"tutorials/define-a-rotor/#","page":"Advanced Rotor Definition","title":"Advanced Rotor Definition","text":"Note that this function can describe the free stream dependent on distance or time, here we simply declare a constant freestream velocity.","category":"page"},{"location":"tutorials/define-a-rotor/#","page":"Advanced Rotor Definition","title":"Advanced Rotor Definition","text":"Define the solver parameters.","category":"page"},{"location":"tutorials/define-a-rotor/#","page":"Advanced Rotor Definition","title":"Advanced Rotor Definition","text":"# Solver parameters\nnrevs = 6                           # Number of revolutions in simulation\nnsteps_per_rev = 72                 # Time steps per revolution\np_per_step = 2                      # Sheds per time step\nttot = nrevs/(RPM/60)               # (s) total simulation time\nnsteps = nrevs*nsteps_per_rev       # Number of time steps\nlambda = 2.125                      # Core overlap\noverwrite_sigma = lambda * 2*pi*R/(nsteps_per_rev*p_per_step) # Smoothing core size\nsurf_sigma = R/10                   # Smoothing radius of lifting surface\nvlm_sigma = surf_sigma              # Smoothing radius of VLM\nshed_unsteady = true                # Shed particles from unsteady loading\n\nmax_particles = ((2*n+1)*B)*nrevs*nsteps_per_rev*p_per_step # Max particles for memory pre-allocation\nplot_disc = true                    # Plot blade discretization for debugging\n\nxfoil = true \t\t\t\t\t\t\t\t\t\t\t\t# Generate airfoil polars for BEM\nverbose = true \t\t\t\t\t\t\t\t\t\t\t# Echo status periodically","category":"page"},{"location":"tutorials/define-a-rotor/#Simulation-Setup-1","page":"Advanced Rotor Definition","title":"Simulation Setup","text":"","category":"section"},{"location":"tutorials/define-a-rotor/#","page":"Advanced Rotor Definition","title":"Advanced Rotor Definition","text":"Now using all of the parameters previously defined, generate the rotor system.\nEvery object must be added to a wing system, so here we create an empty wing system and add the rotor. Objects included in the wing system will not explicitly be included in the solution, but will be included in visualization.","category":"page"},{"location":"tutorials/define-a-rotor/#","page":"Advanced Rotor Definition","title":"Advanced Rotor Definition","text":"# ------------ SIMULATION SETUP --------------------------------------------\n# Generate rotor\nrotor = uns.generate_rotor(rotor_file; pitch=pitch,\n                                            n=n, CW=CW, ReD=ReD,\n                                            verbose=verbose, xfoil=xfoil,\n                                            data_path=data_path,\n                                            plot_disc=plot_disc)\n# Systems of rotors\nrotors = vlm.Rotor[rotor]   # Defining this rotor as its own system\nrotor_systems = (rotors,)\n\n# ----- VEHICLE DEFINITION\n# System of all FLOWVLM objects\nsystem = vlm.WingSystem()\nvlm.addwing(system, run_name, rotor)\n","category":"page"},{"location":"tutorials/define-a-rotor/#","page":"Advanced Rotor Definition","title":"Advanced Rotor Definition","text":"Create a wake_system.\nAny object that sheds a wake must be added to the wake_system.","category":"page"},{"location":"tutorials/define-a-rotor/#","page":"Advanced Rotor Definition","title":"Advanced Rotor Definition","text":"# Wake-shedding system (doesn't include the rotor if quasi-steady vehicle)\nwake_system = vlm.WingSystem()\n\nif VehicleType != uns.QVLMVehicle\n    vlm.addwing(wake_system, run_name, rotor)\nelse\n   # Mute colinear warnings. This is needed since the quasi-steady solver\n   #   will probe induced velocities at the lifting line of the blade\n    uns.vlm.VLMSolver._mute_warning(true)\nend","category":"page"},{"location":"tutorials/define-a-rotor/#","page":"Advanced Rotor Definition","title":"Advanced Rotor Definition","text":"Generate a vehicle object out of the rotor system and wake.\nIf you were generating other bodies such as wings, an aircraft body or a turbine tower, you would first create those and generate the vehicle object with those included.","category":"page"},{"location":"tutorials/define-a-rotor/#","page":"Advanced Rotor Definition","title":"Advanced Rotor Definition","text":"# FVS's Vehicle object\nvehicle = VehicleType(   system;\n                            rotor_systems=rotor_systems,\n                            wake_system=wake_system\n                         )","category":"page"},{"location":"tutorials/define-a-rotor/#","page":"Advanced Rotor Definition","title":"Advanced Rotor Definition","text":"Generate maneuver definition.\nThe simulation needs a maneuver, which is covered in a different guide. Here we simply create a maneuver that will keep the rotor at a constant RPM, not tilt, or translate.","category":"page"},{"location":"tutorials/define-a-rotor/#","page":"Advanced Rotor Definition","title":"Advanced Rotor Definition","text":"    # ----- MANEUVER DEFINITION\n    RPM_fun(t) = 1.0                # RPM (normalized by reference RPM) as a\n                                    # function of normalized time\n\n    angle = ()                      # Angle of each tilting system (none in this case)\n    sysRPM = (RPM_fun, )              # RPM of each rotor system\n    Vvehicle(t) = zeros(3)          # Translational velocity of vehicle over Vcruise\n    anglevehicle(t) = zeros(3)      # (deg) angle of the vehicle\n\n    # FVS's Maneuver object\n    maneuver = uns.KinematicManeuver(angle, sysRPM, Vvehicle, anglevehicle)","category":"page"},{"location":"tutorials/define-a-rotor/#","page":"Advanced Rotor Definition","title":"Advanced Rotor Definition","text":"Create a simulation object for the simulator to run.","category":"page"},{"location":"tutorials/define-a-rotor/#","page":"Advanced Rotor Definition","title":"Advanced Rotor Definition","text":"    # ----- SIMULATION DEFINITION\n    RPMref = RPM\n    Vref = 0.0\n    simulation = uns.Simulation(vehicle, maneuver, Vref, RPMref, ttot)","category":"page"},{"location":"tutorials/define-a-rotor/#Run-Simulation-1","page":"Advanced Rotor Definition","title":"Run Simulation","text":"","category":"section"},{"location":"tutorials/define-a-rotor/#","page":"Advanced Rotor Definition","title":"Advanced Rotor Definition","text":"Call the simulation function on the parameters and options you've defined.","category":"page"},{"location":"tutorials/define-a-rotor/#","page":"Advanced Rotor Definition","title":"Advanced Rotor Definition","text":"    # ------------ RUN SIMULATION ----------------------------------------------\n    pfield = uns.run_simulation(simulation, nsteps;\n                                      # SIMULATION OPTIONS\n                                      Vinf=Vinf,\n                                      # SOLVERS OPTIONS\n                                      p_per_step=p_per_step,\n                                      overwrite_sigma=overwrite_sigma,\n                                      vlm_sigma=vlm_sigma,\n                                      surf_sigma=surf_sigma,\n                                      max_particles=max_particles,\n                                      shed_unsteady=shed_unsteady,\n                                      # OUTPUT OPTIONS\n                                      save_path=nothing,\n                                      run_name=run_name,\n                                      prompt=true,\n                                      verbose=true,\n  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tv_lvl=0,\n                                      )","category":"page"},{"location":"tutorials/define-a-rotor/#","page":"Advanced Rotor Definition","title":"Advanced Rotor Definition","text":"After visualization, you should get a result similar to this.","category":"page"},{"location":"tutorials/define-a-rotor/#","page":"Advanced Rotor Definition","title":"Advanced Rotor Definition","text":"(Image: fvs_singlerotor02)","category":"page"},{"location":"tutorials/define-a-rotor/#Adding-a-Custom-Rotor-1","page":"Advanced Rotor Definition","title":"Adding a Custom Rotor","text":"","category":"section"},{"location":"tutorials/define-a-rotor/#","page":"Advanced Rotor Definition","title":"Advanced Rotor Definition","text":"It is likely that the rotors defined in the repository database do not match your needs, in that case, you will need to provide all of the information to define the rotor in a series of files. The files must be defined in the correct format and directory structure for FlowUnsteady to find it all. If you are unfamiliar with creating file trees, I suggest adding your files directly to the correct directories, however a seperate file structure can easily be used.","category":"page"},{"location":"tutorials/define-a-rotor/#","page":"Advanced Rotor Definition","title":"Advanced Rotor Definition","text":"Create your custom rotor files\nAdd them to the correct directories","category":"page"},{"location":"tutorials/define-a-rotor/#If-using-a-custom-database...-1","page":"Advanced Rotor Definition","title":"If using a custom database...","text":"","category":"section"},{"location":"tutorials/define-a-rotor/#","page":"Advanced Rotor Definition","title":"Advanced Rotor Definition","text":"Create the data structure shown below.\nComplete the steps above.\nWhen initializing the data path (step 1 of defining a rotor), set the data path to the address of the \"data\" directory","category":"page"},{"location":"tutorials/define-a-rotor/#","page":"Advanced Rotor Definition","title":"Advanced Rotor Definition","text":"<img src=\"../assets/howtofigs/directories1.png\" alt=\"directories\" style=\"zoom:60%;\" />","category":"page"},{"location":"tutorials/define-a-rotor/#","page":"Advanced Rotor Definition","title":"Advanced Rotor Definition","text":"The database can be found as a subdirectory of the FlowUnsteady package.","category":"page"},{"location":"tutorials/define-a-rotor/#","page":"Advanced Rotor Definition","title":"Advanced Rotor Definition","text":"../FlowUnsteady/data","category":"page"},{"location":"reference/FLOWVLM/#FLOWVLM-1","page":"FLOWVLM","title":"FLOWVLM","text":"","category":"section"},{"location":"reference/FLOWVLM/#","page":"FLOWVLM","title":"FLOWVLM","text":"FLOWVLM is a vortex lattice method (VLM) code for solving aerodynamics, but is far more than that. FLOWVLM has a general three-dimensional geometric engine that powers much of the geometry of FLOWUnsteady and is also the foundation of the blade-element rotor solver. In this section we describe how wing geometries are defined, how multiple wings can be grouped into a wing system, and how objects can be rotated and translated in space.","category":"page"},{"location":"reference/FLOWVLM/#Wing-Definition-1","page":"FLOWVLM","title":"Wing Definition","text":"","category":"section"},{"location":"reference/FLOWVLM/#","page":"FLOWVLM","title":"FLOWVLM","text":"A FLOWVLM.Wing object is simply a data structure that encapsulates a collection of horseshoes vortices (or a vortex lattice). A horseshoe vortex is made out of one bound vortex located at the quarter-chord position, two trailing bound vortices going back to the trailing edge, and two semi-infinite vortices extending from the trailing edge out in the direction of the freestream, as shown below.","category":"page"},{"location":"reference/FLOWVLM/#","page":"FLOWVLM","title":"FLOWVLM","text":"(Image: )","category":"page"},{"location":"reference/FLOWVLM/#","page":"FLOWVLM","title":"FLOWVLM","text":"A control point is associated to every horseshoe, which is located at the three-quarter chord position. At this point, the no-flow-through boundary condition is imposed, canceling the component of the freestream that is normal to the surface.","category":"page"},{"location":"reference/FLOWVLM/#","page":"FLOWVLM","title":"FLOWVLM","text":"note: Unsteady wake\nIn the unsteady solver of FLOWUnsteady, semi-infinite trailing vortices of the horseshoes are replaced by vortex particles that are shed off the trailing edge at every time step.","category":"page"},{"location":"reference/FLOWVLM/#","page":"FLOWVLM","title":"FLOWVLM","text":"There are three ways of defining a VLM wing. The first one is to manually add chord stations along the wing and discretize the sections in between into horseshoes. This approach is tedious and is rarely used. The second one is through the function FLOWVLM.SimpleWing that takes the parameters of the root and tip of the wing and interpolates and discretizes everything in between, which works well for most conventional wings. Finally, for complex geometries (for instance, an asymmetric wing or a wing with winglets), the user can call FLOWVLM.ComplexWing that works pretty much like the option of manually building the wing but in a friendlier way.","category":"page"},{"location":"reference/FLOWVLM/#Manually-Building-the-Wing-1","page":"FLOWVLM","title":"Manually Building the Wing","text":"","category":"section"},{"location":"reference/FLOWVLM/#","page":"FLOWVLM","title":"FLOWVLM","text":"You can build a wing by adding each chord station manually and indicating the discretization in between.   This is done by indicating the leading edge position and chord length at each station, and the number of horseshoes in between stations.   This approach uses the FLOWVLM.Wing constructor to initialize the wing and the FLOWVLM.addwing function to add each chord.","category":"page"},{"location":"reference/FLOWVLM/#","page":"FLOWVLM","title":"FLOWVLM","text":"FLOWVLM.Wing","category":"page"},{"location":"reference/FLOWVLM/#","page":"FLOWVLM","title":"FLOWVLM","text":"FLOWVLM.addchord","category":"page"},{"location":"reference/FLOWVLM/#","page":"FLOWVLM","title":"FLOWVLM","text":"This requires the user to do all the calculations of what the geometry should look like based on the desired aspect ratio, taper ratio, etc.   In the following line we are doing such calculations for a 40^circ-swept-back wing with an aspect ratio of 5.0.","category":"page"},{"location":"reference/FLOWVLM/#","page":"FLOWVLM","title":"FLOWVLM","text":"  # Wing parameters\n  b = 98*0.0254                   # (m) span\n  ar = 5.0                        # Aspect ratio (span over tip chord)\n  tr = 1.0                        # Taper ratio\n  lambda = 45.0                   # (deg) sweep\n  gamma = 0.0                     # (deg) dihedral\n  twist_tip = 0.0                 # (deg) tip twist\n  twist_root = 0.0                # (deg) root twist\n  n = 4                           # Horseshoes in between chord stations\n\n  # Calculations\n  cr = 1/tr                       # Chord ratio (inverse of taper ratio)\n  c_tip = b/ar                    # Chord at tip\n  c_root = cr*c_tip               # Chord at root\n  y_tip = b/2                     # y-position of tip leading edge\n  x_tip = y_tip*tan(lambda*pi/180)# x-position of tip leading edge\n  z_tip = y_tip*tan(gamma*pi/180) # z-position of tip leading edge","category":"page"},{"location":"reference/FLOWVLM/#","page":"FLOWVLM","title":"FLOWVLM","text":"We initialize the wing by giving it the first chord station, which corresponds to the left chord.","category":"page"},{"location":"reference/FLOWVLM/#","page":"FLOWVLM","title":"FLOWVLM","text":"import FLOWVLM\nvlm = FLOWVLM\n\n# Initialize the wing with the left tip chord\nwing = vlm.Wing(x_tip, -y_tip, z_tip, c_tip, twist_tip)","category":"page"},{"location":"reference/FLOWVLM/#","page":"FLOWVLM","title":"FLOWVLM","text":"Then we go on to add the root and the right tip chord.","category":"page"},{"location":"reference/FLOWVLM/#","page":"FLOWVLM","title":"FLOWVLM","text":"  # Add the root chord\n  vlm.addchord(wing, 0.0, 0.0, 0.0, c_root, twist_root, n)\n\n  # Add the right tip chord\n  vlm.addchord(wing, x_tip, y_tip, z_tip, c_tip, twist_tip, n)","category":"page"},{"location":"reference/FLOWVLM/#","page":"FLOWVLM","title":"FLOWVLM","text":"Notice that we placed the root at the (0, 0, 0) position.   This doesn't always have to be this way, but remember to move the other chord stations accordingly if you want to place the nose somewhere else.","category":"page"},{"location":"reference/FLOWVLM/#","page":"FLOWVLM","title":"FLOWVLM","text":"tip: Build wings from left to right\nIt is recommended that wings are build from left to right, or from -y to +y. Otherwise, the normals of the surface will point down in the negative z-direction and the circulation of the wing will be negative when generating upwards lift (positive z-direction). This is not a problem for the solver, but could be difficult to wrap your head around a negative circulation being associated to a positive lift.","category":"page"},{"location":"reference/FLOWVLM/#SimpleWing-1","page":"FLOWVLM","title":"SimpleWing","text":"","category":"section"},{"location":"reference/FLOWVLM/#","page":"FLOWVLM","title":"FLOWVLM","text":"asdasd","category":"page"},{"location":"reference/FLOWVLM/#ComplexWing-1","page":"FLOWVLM","title":"ComplexWing","text":"","category":"section"},{"location":"how-to-guide/set-up-runtime-functions/#Set-up-run-time-Functions-1","page":"Set up run-time Functions","title":"Set up run-time Functions","text":"","category":"section"},{"location":"tutorials/getting-started/#Getting-Started-1","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"how-to-guide/wake-stability/#Approach-Wake-Stability-Issues-1","page":"Approach Wake Stability Issues","title":"Approach Wake Stability Issues","text":"","category":"section"},{"location":"how-to-guide/calculate-aerodynamic-forces/#Calculate-Aerodynamic-Forces-1","page":"Calculate Aerodynamic Forces","title":"Calculate Aerodynamic Forces","text":"","category":"section"},{"location":"reference/FLOWUnsteady/#FLOWUnsteady-1","page":"FLOWUnsteady","title":"FLOWUnsteady","text":"","category":"section"},{"location":"reference/FLOWUnsteady/#","page":"FLOWUnsteady","title":"FLOWUnsteady","text":"Pages = [\"FLOWUnsteady.md\"]","category":"page"},{"location":"reference/FLOWUnsteady/#Creating-a-Custom-Rotor-1","page":"FLOWUnsteady","title":"Creating a Custom Rotor","text":"","category":"section"},{"location":"reference/FLOWUnsteady/#","page":"FLOWUnsteady","title":"FLOWUnsteady","text":"If you do not already have the rotor files to describe your rotor, then you will need to create them. Here we will go through each file type and what to put in them. It is important to note that file name and types are not important, however they must be comma delimited.  We will use the DJI-II from the FLOWUnsteady database as an example.","category":"page"},{"location":"reference/FLOWUnsteady/#","page":"FLOWUnsteady","title":"FLOWUnsteady","text":"It is important to note that if XFOIL is not run (marked false), then airfoil polars must be provided. The files that affect solution outcome are the chord distribution, pitch distribution, leading edge distribution, and airfoil polar files. If XFOIL is marked to run, all of the geometric material must be accurate.","category":"page"},{"location":"reference/FLOWUnsteady/#MainFile.csv-1","page":"FLOWUnsteady","title":"MainFile.csv","text":"","category":"section"},{"location":"reference/FLOWUnsteady/#","page":"FLOWUnsteady","title":"FLOWUnsteady","text":"The main file describes the overall rotor, and points to the blade file that describes one of the blades.","category":"page"},{"location":"reference/FLOWUnsteady/#","page":"FLOWUnsteady","title":"FLOWUnsteady","text":"property file description\nRtip 0.75 (m) Radius of blade tip\nRhub 0.0375 (m) Radius of hub\nB 3 Number of blades\nblade DJI-II_blade.csv Blade file","category":"page"},{"location":"reference/FLOWUnsteady/#Blade.csv-1","page":"FLOWUnsteady","title":"Blade.csv","text":"","category":"section"},{"location":"reference/FLOWUnsteady/#","page":"FLOWUnsteady","title":"FLOWUnsteady","text":"The main file points to all of the files that desribe the blade and spline parameters.","category":"page"},{"location":"reference/FLOWUnsteady/#","page":"FLOWUnsteady","title":"FLOWUnsteady","text":"property file description\nchorddist DJI-II_chorddist.csv Chord distribution\npitchdist DJI-II_pitchdist.csv Pitch distribution\nsweepdist DJI-II_sweepdist.csv LE sweep distribution\nheightdist DJI-II_heightdist.csv LE height distribution\nairfoil_files DJI-II_airfoils.csv Airfoil distribution\nspl_k 1 Spline order\nspl_s 2.0e-7 Spline smoothing","category":"page"},{"location":"reference/FLOWUnsteady/#ChordDist.csv-1","page":"FLOWUnsteady","title":"ChordDist.csv","text":"","category":"section"},{"location":"reference/FLOWUnsteady/#","page":"FLOWUnsteady","title":"FLOWUnsteady","text":"This file provides the distribution of the chord along the blade, normalized by the radius of the blade. The file must go in order of root to tip. The root need not be defined, but the tip must be. The file can have any number of paired numbers. Any values used by the solver that are not provided will be interpolated.","category":"page"},{"location":"reference/FLOWUnsteady/#","page":"FLOWUnsteady","title":"FLOWUnsteady","text":"r/R c/R\n0.0411523 0.121011\n0.0685871 0.138171\n... ...\n1.0 0.0978361","category":"page"},{"location":"reference/FLOWUnsteady/#PitchDist.csv-1","page":"FLOWUnsteady","title":"PitchDist.csv","text":"","category":"section"},{"location":"reference/FLOWUnsteady/#","page":"FLOWUnsteady","title":"FLOWUnsteady","text":"This file describes the twist of the blade along the blade. The file can have any number of paired numbers. Any values used by the solver that are not provided will be interpolated.","category":"page"},{"location":"reference/FLOWUnsteady/#","page":"FLOWUnsteady","title":"FLOWUnsteady","text":"r/R twist (deg)\n0.0411523 16.4567\n0.0685871 17.5\n... ...\n1.0 11.6","category":"page"},{"location":"reference/FLOWUnsteady/#SweepDist.csv-1","page":"FLOWUnsteady","title":"SweepDist.csv","text":"","category":"section"},{"location":"reference/FLOWUnsteady/#","page":"FLOWUnsteady","title":"FLOWUnsteady","text":"This file describes the sweep distribution. This is also known as the leading edge distribution, it describes the distance of the the leading edge from a line coming from the center of the hub. These lines change depending on how many blades are included on a rotor (see photo below for example of a the rotor with 3 blades). The file can have any number of paired numbers. Any values used by the solver that are not provided will be interpolated.","category":"page"},{"location":"reference/FLOWUnsteady/#","page":"FLOWUnsteady","title":"FLOWUnsteady","text":"<img src=\"../assets/howtofigs/sweepdist.png\" alt=\"sweepdist\" style=\"zoom:33%;\" />","category":"page"},{"location":"reference/FLOWUnsteady/#","page":"FLOWUnsteady","title":"FLOWUnsteady","text":"r/R y/R (y-distance of LE from the middle point of hub)\n0.0411523 0.0576211\n0.0685871 0.0605955\n... ...\n1.0 0.0344412","category":"page"},{"location":"reference/FLOWUnsteady/#HeightDist.csv-1","page":"FLOWUnsteady","title":"HeightDist.csv","text":"","category":"section"},{"location":"reference/FLOWUnsteady/#","page":"FLOWUnsteady","title":"FLOWUnsteady","text":"This file describes the height distribution, also known as anhedral (or precode for turbines). This describes the height of the leading edge from the top face of the hub. The file can have any number of paired numbers. Any values used by the solver that are not provided will be interpolated.","category":"page"},{"location":"reference/FLOWUnsteady/#","page":"FLOWUnsteady","title":"FLOWUnsteady","text":"<img src=\"../assets/howtofigs/precone.png\" alt=\"precone\" style=\"zoom:12%;\" />","category":"page"},{"location":"reference/FLOWUnsteady/#","page":"FLOWUnsteady","title":"FLOWUnsteady","text":"r/R z/R (height of LE from the top face of hub)\n0.0686391 -0.00242965\n0.2 0.00728895\n... ...\n1.0 -0.0242965","category":"page"},{"location":"reference/FLOWUnsteady/#Airfoil_Files.csv-1","page":"FLOWUnsteady","title":"Airfoil_Files.csv","text":"","category":"section"},{"location":"reference/FLOWUnsteady/#","page":"FLOWUnsteady","title":"FLOWUnsteady","text":"This file describes the airfoils along the blade and the paired aero file that goes with the contour file. The contour file is a file of the geometric shape of the airfoil. The aero file is the airfoil polar, the file that has the coefficient of lift, drag and moment for a given set of angles of attack for the airfoil. Note that the information is interpolated, so airfoils between two stated airfoils will be an interpolation between the two. If XFOIL is marked to run, then the aero files will not be used. As many pairs of airfoil files as desired may be used.","category":"page"},{"location":"reference/FLOWUnsteady/#","page":"FLOWUnsteady","title":"FLOWUnsteady","text":"r/R Contour file Aero file\n0.0 e856-il.csv xf-e856-il-50000-n5.csv\n0.3 e63.csv xf-e63-il-50000-n5.csv\n1.0 e63.csv xf-e63-il-50000-n5.csv","category":"page"},{"location":"reference/FLOWUnsteady/#AirfoilGeoFile.csv-1","page":"FLOWUnsteady","title":"AirfoilGeoFile.csv","text":"","category":"section"},{"location":"reference/FLOWUnsteady/#","page":"FLOWUnsteady","title":"FLOWUnsteady","text":"This file describes the geometry of the airfoil by giving x and y coordinates of the airfoil surface. These coordinates are normalized by the chord length. The order of the points should be trailing edge, upper surface, leading edge, lower surface, then trailing edge. As many coordinate pairs as desired may be used, all other points used will be interpolated.","category":"page"},{"location":"reference/FLOWUnsteady/#","page":"FLOWUnsteady","title":"FLOWUnsteady","text":"x/c y/c\n1.0 0.0\n0.99619 0.00144\n... ...\n1.0 0.0","category":"page"},{"location":"reference/FLOWUnsteady/#AirfoilPolarFile.dat-1","page":"FLOWUnsteady","title":"AirfoilPolarFile.dat","text":"","category":"section"},{"location":"reference/FLOWUnsteady/#","page":"FLOWUnsteady","title":"FLOWUnsteady","text":"This file contains all of the airfoils' coefficients of lift, drag and moment for a given set of angles of attack for the airfoil. Values that are required but not given will be interpolated. Note that the polar should match the general Reynolds number that the given section will experience. If XFOIL is set to run, this file will not be used. This is the only file that is not a comma delimited file.","category":"page"},{"location":"reference/FLOWUnsteady/#","page":"FLOWUnsteady","title":"FLOWUnsteady","text":"DU21 airfoil with an aspect ratio of 17.  Original -180 to 180deg Cl, Cd, and Cm versus AOA data taken from Appendix A of DOWEC document 10046_009.pdf (numerical values obtained from Koert Lindenburg of ECN).\nCl and Cd values corrected for rotational stall delay and Cd values corrected using the Viterna method for 0 to 90deg AOA by Jason Jonkman using AirfoilPrep_v2p0.xls.\none more line\n 1        \t Number of airfoil tables in this file\n 1.0      \t Reynolds numbers in millions\n 0.0      \t Control setting\n 8.0      \t Stall angle (deg)\n-5.0609      Zero lift angle of attack (deg)\n 6.2047      Cn slope for zero lift (dimensionless)\n 1.4144      Cn at stall value for positive angle of attack\n-0.5324      Cn at stall value for negative angle of attack\n-1.50        Angle of attack for minimum CD (deg)\n 0.0057   Minimum CD value\n-180.00    0.000   0.0185   0.0000\n-175.00    0.394   0.0332   0.1978\n-160.00    0.670   0.2809   0.2738\n  ...\t\t\t\t...\t\t\t...\t\t\t\t...","category":"page"},{"location":"reference/FLOWUnsteady/#rotordatabasestructure-1","page":"FLOWUnsteady","title":"Rotor Database Structure","text":"","category":"section"},{"location":"reference/FLOWUnsteady/#","page":"FLOWUnsteady","title":"FLOWUnsteady","text":"The database can be found as a subdirectory of the FlowUnsteady package.","category":"page"},{"location":"reference/FLOWUnsteady/#","page":"FLOWUnsteady","title":"FLOWUnsteady","text":"../FlowUnsteady/data","category":"page"},{"location":"reference/FLOWUnsteady/#","page":"FLOWUnsteady","title":"FLOWUnsteady","text":"MainFile.csv => ../data/rotors\nAirfoils.csv => ../data/rotors\nBlade.csv => ../data/rotors\nChordDist.csv => ../data/rotors\nHeightDist.csv => ../data/rotors\nPitchDist.csv => ../data/rotors\nSweepDist.csv => ../data/rotors\nAirfoilGeo1.csv* => ../data/airfoils\nAirfoilGeo2.csv => ../data/airfoils\nAirfoilGeox.csv => ../data/airfoils\nAirfoilPol1.dat** => ../data/airfoils\nAirfoilPol2.dat => ../data/airfoils\nAirfoilPolx.dat => ../data/airfoils","category":"page"},{"location":"reference/FLOWUnsteady/#","page":"FLOWUnsteady","title":"FLOWUnsteady","text":"*Note: This can be as many geometry files as you would like to include along the blade.","category":"page"},{"location":"reference/FLOWUnsteady/#","page":"FLOWUnsteady","title":"FLOWUnsteady","text":"**Note: Airfoil Polars are needed if xfoil is set to false. An airfoil polar must be provided for every airfoil.","category":"page"},{"location":"tutorials/define-complex-wings/#Advanced-Wing-Definition-1","page":"Advanced Wing Definition","title":"Advanced Wing Definition","text":"","category":"section"},{"location":"tutorials/define-complex-wings/#","page":"Advanced Wing Definition","title":"Advanced Wing Definition","text":"In the tutorial First Steps we introduced the simpleWing() function.  In this guide, we look at creating more complex wings using the complexWing() function. Note that this is a how to guide, showing how to use the complexWing() function. For details on this function implementation, please refer to the refernce section of this documentation.","category":"page"},{"location":"tutorials/define-complex-wings/#Define-a-Symmetric-Wing-1","page":"Advanced Wing Definition","title":"Define a Symmetric Wing","text":"","category":"section"},{"location":"tutorials/define-complex-wings/#","page":"Advanced Wing Definition","title":"Advanced Wing Definition","text":"In order to use the complexWing() function, we only need to understand that we are responsible for defining the elements of each chord section individually, which gives us greater flexibility than the simpleWing() function, where many assumptions are made for the user.","category":"page"},{"location":"tutorials/define-complex-wings/#","page":"Advanced Wing Definition","title":"Advanced Wing Definition","text":"Let us begin by defining some of the wing parameters","category":"page"},{"location":"tutorials/define-complex-wings/#","page":"Advanced Wing Definition","title":"Advanced Wing Definition","text":"span = 1.0                      #length of full span\nnumlattice = 10                 #number of lattice elements on half-span","category":"page"},{"location":"tutorials/define-complex-wings/#","page":"Advanced Wing Definition","title":"Advanced Wing Definition","text":"Now let's define the parameters of each chord.  Note that position is normalized by the span, and length is normalized by the tip chord. It is generally easiest to define things absolutely and then normalize.","category":"page"},{"location":"tutorials/define-complex-wings/#","page":"Advanced Wing Definition","title":"Advanced Wing Definition","text":"Also Since we are creating a symmetric wing, we only need information from the center to the tip of the wing, postive indicating along the positive axis for the wing system.","category":"page"},{"location":"tutorials/define-complex-wings/#","page":"Advanced Wing Definition","title":"Advanced Wing Definition","text":"poschord = [0.0; 0.5; 1.0]./span                    #postion of chord stations\nlengthtipchord = 0.03                               #length of tip chord\nlengthchord = [0.075; 0.05; 0.03]./lengthtipchord   #length of chords\ntwistchord = [0.0; 0.0; -3.0]                       #twist of chords, in degrees","category":"page"},{"location":"tutorials/define-complex-wings/#","page":"Advanced Wing Definition","title":"Advanced Wing Definition","text":"Then let's define the parameters of each section between chord definitions.","category":"page"},{"location":"tutorials/define-complex-wings/#","page":"Advanced Wing Definition","title":"Advanced Wing Definition","text":"sweepsection = [10.0; 5.0]      #sweep of sections between chords, in degrees\ndihedralsection = [0.0; 7.0]    #dihedral of sections between chords, in degrees","category":"page"},{"location":"tutorials/define-complex-wings/#","page":"Advanced Wing Definition","title":"Advanced Wing Definition","text":"We also need to define the aspect ration of the wing, which is simply the absolute span over the absolute tip chord length.","category":"page"},{"location":"tutorials/define-complex-wings/#","page":"Advanced Wing Definition","title":"Advanced Wing Definition","text":"aspectratio = span/lengthtipchord","category":"page"},{"location":"tutorials/define-complex-wings/#","page":"Advanced Wing Definition","title":"Advanced Wing Definition","text":"With this, we can call the complexWing() function for a symmetric wing.","category":"page"},{"location":"tutorials/define-complex-wings/#","page":"Advanced Wing Definition","title":"Advanced Wing Definition","text":"mainwing = vlm.complexWing(span, aspectratio, numlattice, poschord, lengthchord, twistchord, sweepsection, dihedralsection; symmetric=true)","category":"page"},{"location":"tutorials/define-complex-wings/#","page":"Advanced Wing Definition","title":"Advanced Wing Definition","text":"(Image: symmetric wing)","category":"page"},{"location":"tutorials/define-complex-wings/#Define-a-Non-symmetric-Wing-1","page":"Advanced Wing Definition","title":"Define a Non-symmetric Wing","text":"","category":"section"},{"location":"tutorials/define-complex-wings/#","page":"Advanced Wing Definition","title":"Advanced Wing Definition","text":"A good example of a non-symmetric wing is something like a vertical stabilizer. The definitions are basically the same, we just set the symmetric flag to false when creating the wing.","category":"page"},{"location":"tutorials/define-complex-wings/#","page":"Advanced Wing Definition","title":"Advanced Wing Definition","text":"span = 0.25                             #length of full span\nnumlattice = 5                          #number of lattice elements on half-span\nposchord = [0.0; 1.0]                   #postion of chord stations\nlengthtipchordvstab = 0.05              #length of tip chord\nlengthchordvstab = [1.25; 1.0]          #length of chords\ntwistchord = [0.0; 0.0]                 #twist of chords, in degrees\nsweepsection = [0.0]                    #sweep of sections between chords, in degrees\ndihedralsection = [0.0]                 #dihedral of sections between chords, in degrees\naspectratio = span/lengthtipchordvstab\n\nverticalstabilizer = vlm.complexWing(span, aspectratio, numlattice, poschord, lengthchordvstab, twistchord, sweepsection, dihedralsection; symmetric=false, chordalign=1.0)","category":"page"},{"location":"tutorials/define-complex-wings/#","page":"Advanced Wing Definition","title":"Advanced Wing Definition","text":"note: Chord Alignment\nThe user can choose where to align the chords. A value of 0.0 aligns along the leading edge, while a value of 1.0 aligns along the trailing edge. Values between 0.0 and 1.0 will align along that ratio of the chord lengths.  For example, if you wanted to align the wing along the quarter-chord postition, you would set cordalign = 0.25","category":"page"},{"location":"tutorials/define-complex-wings/#","page":"Advanced Wing Definition","title":"Advanced Wing Definition","text":"Now our verticle stabilizer is defined, but it's not really verticle yet, and it is positioned at the default location, where our main wing is as well.  To make it a verticle stabilizer, we'll need to rotate and translate it.  To do so, we need to define an origin and coordinate system for the verticle stabilizer wing object.","category":"page"},{"location":"tutorials/define-complex-wings/#","page":"Advanced Wing Definition","title":"Advanced Wing Definition","text":"originvstab = [0.5; 0.0; 0.0]                       #origin moved 0.5 in positive x-direction\ncsysvstab = [1.0 0.0 0.0; 0.0 0.0 1.0; 0.0 1.0 0.0] #csys rotated 90 degrees from default","category":"page"},{"location":"tutorials/define-complex-wings/#","page":"Advanced Wing Definition","title":"Advanced Wing Definition","text":"Then we can set the coordianate system.","category":"page"},{"location":"tutorials/define-complex-wings/#","page":"Advanced Wing Definition","title":"Advanced Wing Definition","text":"vlm.setcoordsystem(verticalstabilizer,originvstab,csysvstab)","category":"page"},{"location":"tutorials/define-complex-wings/#","page":"Advanced Wing Definition","title":"Advanced Wing Definition","text":"(Image: non-symmetric wing)","category":"page"},{"location":"tutorials/define-complex-wings/#Define-Control-Surfaces-1","page":"Advanced Wing Definition","title":"Define Control Surfaces","text":"","category":"section"},{"location":"tutorials/define-complex-wings/#","page":"Advanced Wing Definition","title":"Advanced Wing Definition","text":"There is no automatic way to define control surfaces. Each control surface will need to be defined as its own wing object and placed manually. Therefore, you must adjust based on the objects already in place. Let's add a rudder to our verticle stabilizer.","category":"page"},{"location":"tutorials/define-complex-wings/#","page":"Advanced Wing Definition","title":"Advanced Wing Definition","text":"span = 0.25                        #length of full span\nnumlattice = 5                     #number of lattice elements on half-span\nposchord = [0.0; 0.25; 1.0]        #postion of chord stations\nlengthtipchord = 0.03              #length of tip chord\nlengthchord = [1.25; 1.5; 1.0]     #length of chords\ntwistchord = [0.0; 0.0; 0.0]       #twist of chords, in degrees\nsweepsection = [0.0; 0.0]          #sweep of sections between chords, in degrees\ndihedralsection = [0.0; 0.0]       #dihedral of sections between chords, in degrees\naspectratio = span/lengthtipchord\n\nrudder = vlm.complexWing(span, aspectratio, numlattice, poschord, lengthchord, twistchord, sweepsection, dihedralsection; symmetric=false, chordalign=0.0)\n\nlengthrootchordvstab = lengthchordvstab[1]*lengthtipchordvstab\noriginrudder = [0.5+lengthrootchordvstab; 0.0; 0.0]  #account for vstab position and chord\ncsysrudder = [1.0 0.0 0.0; 0.0 0.0 1.0; 0.0 1.0 0.0] #csys rotated 90 degrees from default\nvlm.setcoordsystem(rudder,originrudder,csysrudder)","category":"page"},{"location":"tutorials/define-complex-wings/#","page":"Advanced Wing Definition","title":"Advanced Wing Definition","text":"(Image: rudder)","category":"page"},{"location":"tutorials/define-complex-wings/#","page":"Advanced Wing Definition","title":"Advanced Wing Definition","text":"span = 1.0                      #length of full span\nnumlattice = 10                 #number of lattice elements on half-span\n\nposchord = [0.0; 0.5; 1.0]./span                #postion of chord stations\nlengthtipchord = 0.03                            #length of tip chord\nlengthchord = [0.075; 0.05; 0.03]./lengthtipchord   #length of chords\ntwistchord = [0.0; 0.0; -3.0]                   #twist of chords, in degrees\nsweepsection = [10.0; 5.0]      #sweep of sections between chords, in degrees\ndihedralsection = [0.0; 7.0]    #dihedral of sections between chords, in degrees\naspectratio = span/lengthtipchord\n\nmainwing = vlm.complexWing(span, aspectratio, numlattice, poschord, lengthchord, twistchord, sweepsection, dihedralsection; symmetric=true)\n\n\nspan = 0.25                                     #length of full span\nnumlattice = 5                                  #number of lattice elements on half-span\nposchord = [0.0; 1.0]                #postion of chord stations\nlengthtipchordvstab = 0.05                          #length of tip chord\nlengthchordvstab = [1.25; 1.0]     #length of chords\ntwistchord = [0.0; 0.0]                         #twist of chords, in degrees\nsweepsection = [0.0]                      #sweep of sections between chords, in degrees\ndihedralsection = [0.0]                    #dihedral of sections between chords, in degrees\naspectratio = span/lengthtipchordvstab\n\nverticalstabilizer = vlm.complexWing(span, aspectratio, numlattice, poschord, lengthchordvstab, twistchord, sweepsection, dihedralsection; symmetric=false, chordalign=1.0)\n\noriginvstab = [0.5; 0.0; 0.0]                       #origin moved 0.5 in positive x-direction\ncsysvstab = [1.0 0.0 0.0; 0.0 0.0 1.0; 0.0 1.0 0.0] #csys rotated 90 degrees from default\nvlm.setcoordsystem(verticalstabilizer,originvstab,csysvstab)\n\n\n\nspan = 0.25                                     #length of full span\nnumlattice = 5                                  #number of lattice elements on half-span\nposchord = [0.0; 0.25; 1.0]                #postion of chord stations\nlengthtipchord = 0.03                          #length of tip chord\nlengthchord = [1.25; 1.5; 1.0]     #length of chords\ntwistchord = [0.0; 0.0; 0.0]                         #twist of chords, in degrees\nsweepsection = [0.0; 0.0]                      #sweep of sections between chords, in degrees\ndihedralsection = [0.0; 0.0]                    #dihedral of sections between chords, in degrees\naspectratio = span/lengthtipchord\n\nrudder = vlm.complexWing(span, aspectratio, numlattice, poschord, lengthchord, twistchord, sweepsection, dihedralsection; symmetric=false, chordalign=0.0)\n\nlengthrootchordvstab = lengthchordvstab[1]*lengthtipchordvstab\noriginrudder = [0.5+lengthrootchordvstab; 0.0; 0.0]                       #account for vstab position and chord\ncsysrudder = [1.0 0.0 0.0; 0.0 0.0 1.0; 0.0 1.0 0.0] #csys rotated 90 degrees from default\nvlm.setcoordsystem(rudder,originrudder,csysrudder)\n\n\nsystem = vlm.WingSystem()\nvlm.addwing(system,\"mainwing\",mainwing)\nvlm.addwing(system,\"vstab\",verticalstabilizer)\nvlm.addwing(system,\"rudder\",rudder)\n\nVinf(x,t) = [1,0,0]         #non-dimensional function defining free stream velocity\nvlm.setVinf(system, Vinf)   #set freestream velocity for the system\n\nrun_name = \"tutorial\"           #define identifier at beginning of file names\nsave_path = \"./simplewing/\"     #define directory where files will be saved\n\nrun(`rm -rf $save_path`)        #clear out directory where files will be saved\nrun(`mkdir $save_path`)         #re-create directory fresh\n\nvlm.save(system, run_name; path=save_path)  #save geometry in a .vtk file format\nrun(`paraview`)","category":"page"},{"location":"tutorials/define-complex-wings/#Define-things-Manually-1","page":"Advanced Wing Definition","title":"Define things Manually","text":"","category":"section"},{"location":"how-to-guide/select-a-solver/#Select-a-Solver-1","page":"Select a Solver","title":"Select a Solver","text":"","category":"section"},{"location":"reference/VPM/#Vortex-Particle-Method-1","page":"Vortex Particle Method","title":"Vortex Particle Method","text":"","category":"section"},{"location":"how-to-guide/set-up-monitors/#Set-up-run-time-Monitors-1","page":"Set up run-time Monitors","title":"Set up run-time Monitors","text":"","category":"section"},{"location":"#Welcome-to-FLOWUnsteady-1","page":"Home","title":"Welcome to FLOWUnsteady","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"If you are brand-new to FLOWUnsteady, you should begin with our Getting Started guide in the Tutorials.  You may then consider taking a glance at how to Visualize with Paraview in order to be prepared to visualize as you go.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"After getting the code set up, you'll be able to take your First Steps with FLOWUnsteady.","category":"page"}]
}
